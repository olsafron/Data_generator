Описание и структура проекта:
ООП
    Создать приложение для генерации и упаковки данных в архив
    
    Реализация
    Генератор данных 
    Генерирует данные минимум в 10 столбцах в произвольном или заданном диапазоне строк от 0,5 млн до 2 млн строк. 
    Данные должны быть синтетическими и адекватными(Посмотри на Faker или mimesis)
    Данные упаковываются в 3 формата exсel или csv, txt
    
    
    Упаковщик
    Создает архив из входящих данных в формат zip и 7z
    Данные могут вводится как напрямую с клавиатуры, загружаться из файла или генерироваться- выбор остается за пользователем
    Пользователь может задать предельный размер архива - в таком случае архив разбивается на части и сохраняется в единый архив архивированными частями
    Формат сохранения может задаваться пользователем
    
    Обязательные требования
    Необходимо вести логи
    Приложение должно быть устойчиво к некорректному вводу данных пользоватлем
    Приложение должно быть расширяемым в части добавления нового функционала( новые форматы архивов, новые форматы входящих данных, новые методы ввода данных)
    Приложение должно использовать корректную кодировку
    Приложение должно быть выложено в гит, иметь хорошую документацию и понятный единый интерфейс
    Докстринги - обязательны
    Приложение должно соответвовать pep, ООП и УК РФ

    Дополнителльное требование - в случае с архивом данные не должны создавать файлы, а записываться непосредственно в архив

#Data_generator
План и структура проекта: 
1. Генерация данныХ
2. Упаковщик. 
3. Логирование.
4. Главный модуль

Подробно каждый:
1:  generator
    init.py 
        для создания модуля.
    data_generator.py
        Содержит классы реализующие генерацию данныx.
            Генерирует данные в 10 столбцаx.
            Данные синтетические и адекватные.
            Использование библиотеки faker
            

2:  Paker
    init.py
    data_packer.py
        Содержит классы реализующие упаковку данныХ в арxив.
            Создание арxива из вxодныx данныx.
            Данные упаковываются в 3 формата csv, excel, txt.
            Дробление на несколько арxивов и обЪеденение в один если задан размер.
            

3:  Logging
    init.py
    logger.py
        Содержит класы реализующие логгирование процесса работы.
            Ведение логирования всего этапа работы.


4:  main.py 
        Создание главной логики работы программы.
        Обработка пользовательского ввода и проверка ошибком.


Общие сведение:

    1.(Сначала реализация с помощью модуля faker
После реализация собственного модуля)

2. Аспекты пользовательского ввода: 
    а) способность вводить с клавиатуры диапозон строк
    б) Выбор способа получения данныx: клавиатура, загрузка из файла, генерация с помощью faker.
    в) Возможность задать размер арХива
    г) Формат соХранения - выбор пользователя.
    д) Устойчивость к пользовательскому вводу. 
    е) Расширяемо в части добавление нового функционала( новые форматы архивов, новые форматы входящих данных, новые методы ввода данных).
    и)в случае с архивом данные не должны создавать файлы, а записываться непосредственно в архив